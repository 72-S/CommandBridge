name: Build and Create Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Get Last Commit Message
        id: get-commit-message
        run: |
          git log --pretty=format:'%B' -n 1 > commit_message.txt
          echo "COMMIT_MESSAGE=$(cat commit_message.txt)" >> $GITHUB_ENV

      - name: Generate AI-Based README for Version Change
        id: generate-readme
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}
        run: |
          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-3.5-turbo",
              "messages": [
                {
                  "role": "system",
                  "content": "Generate a release note for a software project based on the following commit message. The release note should be written in readme format."
                },
                {
                  "role": "user",
                  "content": "The commit message for the release note: \"${COMMIT_MESSAGE}\""
                }
              ]
            }')
          echo "$RESPONSE" | jq -r '.choices[0].message.content' > release_note.md
          echo "Commit Message: $COMMIT_MESSAGE"
      - name: Read Release Note
        id: read-release-note
        run: |
          RELEASE_NOTE=$(cat release_note.md)
          echo "RELEASE_NOTE<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          RELEASE_NOTE: ${{ env.RELEASE_NOTE }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ env.RELEASE_NOTE }}
          draft: false
          prerelease: false

      - name: Upload Bukkit JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Bukkit/target/CommandBridgeBukkit-*.jar
          asset_name: CommandBridgeBukkit-v${{ github.run_number }}.jar
          asset_content_type: application/java-archive

      - name: Upload Velocity JAR to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Velocity/target/CommandBridgeVelocity-*.jar
          asset_name: CommandBridgeVelocity-v${{ github.run_number }}.jar
          asset_content_type: application/java-archive
